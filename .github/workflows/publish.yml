name: Upload and Test Python Package

on:
  release:
    types: [published]  # Triggers when a GitHub release is created/published

permissions:
  contents: read
  id-token: write  # Needed only if you're using OIDC "trusted publishing"

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Upgrade pip & install build tools
        run: |
          pip install --upgrade pip
          pip install build

      - name: Build release distributions
        run: |
          python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs: [release-build]  # Wait for 'release-build' job to finish
    steps:
      - name: Download release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # Provide your PyPI token as a GitHub secret named PYPI_API_TOKEN
          password: ${{ secrets.PYPI_API_TOKEN }}

          # Uncomment if publishing to TestPyPI instead:
          # repository-url: https://test.pypi.org/legacy/
          # password: ${{ secrets.TEST_PYPI_API_TOKEN }}

          packages-dir: dist/

  pypi-test-install:
    runs-on: ubuntu-latest
    needs: [pypi-publish]  # Wait until publication completes
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Upgrade pip
        run: pip install --upgrade pip

      - name: Test install from PyPI
        run: pip install insightai

      - name: Verify basic import
        run: |
          python -c "import insightai; print('InsightAI version:', insightai.__version__ if hasattr(insightai, '__version__') else 'No __version__ found!')"
